<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[dubbo provider start process analysis]]></title>
      <url>https://qiufanghua.github.io/2016/04/27/dubbo-provider-start-process-analysis/</url>
      <content type="html"><![CDATA[<h1 id="Dubbo简介"><a href="#Dubbo简介" class="headerlink" title="Dubbo简介"></a>Dubbo简介</h1><h1 id="Dubbo启动过程分析"><a href="#Dubbo启动过程分析" class="headerlink" title="Dubbo启动过程分析"></a>Dubbo启动过程分析</h1><p>Dubbo是基于Spring容器配置与管理Dubbo服务，我们通过Dubbo提供的Spring命名空间配置Dubbo应用信息，发布的服务，引用的服务等信息，通过Spring容器启动Dubbo服务，下面从分别从服务提供者语消费着详细的介绍下启动过程</p>
<hr>
<h2 id="Dubbo服务提供者启动过程"><a href="#Dubbo服务提供者启动过程" class="headerlink" title="Dubbo服务提供者启动过程"></a>Dubbo服务提供者启动过程</h2><ul>
<li>Dubbo配置。通过dubbo namespace配置application，module，registry，monitor，provider，consumer，protocol，service，reference，annotation信息（各模块信息参考模块分析章节）。</li>
<li>Dubbo命名空间处理。通过继承Spring的NamespaceHandlerSupport配置Dubbo命名空间解析器，由解析器解析配置的Dubbo信息并生成相对应的BeanDefinition，从而生成对应的Dubbo配置类，服务Bean（服务提供者）以及服务Bean引用（服务消费者）。涉及的类DubboNamespaceHandler（Dubbo命名空间处理），DubboBeanDefinitionParser（解析Dubbo配置并生成BeanDefinition）。<br><img src="/images/java/dubbo/parser_regester.png" alt="Dubbo parser registe"></li>
<li>服务提供者配置。Dubbo提供<dubbo:service>xml以及@Service注解方式配置服务提供者信息，由DubboBeanDefinitionParser解析并生成服务的BeanDefinition，Spring根据BeanDefinition生成服务的ServiceBean。<br><img src="/images/java/dubbo/bean_parser.png" alt="Dubbo bean definition"></dubbo:service></li>
<li>服务发布-入口。通过前面的步骤配置的服务都会生成对应的ServiceBean实例，该类实现了InitializingBean，ApplicationListener，因此我们有2种入口发布我们的服务。一是Spring容器在完成服务配置后调用afterPropertiesSet方法，该方法会根据是否配置了服务暴露Delay而决定是否需要发布服务（一般我们都会设置delay＝－1，也即暂时发布服务）；二是在Spring容器成功启动后发布服务。<br><img src="/images/java/dubbo/service_export.png" alt="Dubbo bean definition"></li>
<li>服务发布-获取服务配置的注册URL信息，简单说就是我们的服务需要注册或者输出到哪里，由谁来管理服务。获取的url格式如：<strong>registry</strong>://172.31.105.107:4180/com.alibaba.dubbo.registry.RegistryService?application=fs-open-pay_business&amp;check=false&amp;compiler=javassist&amp;dubbo=2.5.3&amp;logger=slf4j&amp;organization=FSOPEN&amp;owner=fs-open-pay_business&amp;pid=5428&amp;registry=zookeeper&amp;timestamp=1461553111445</li>
<li>服务发布-通过代理工厂生成Invoker服务调用者，默认是通过javassist动态生成Wrapper类而不是通过反射来调用服务方法。<br><img src="/images/java/dubbo/JavassistProxyFactory.png" alt="JavassistProxyFactory create invoker"><br>生成的wrapper类代码内容如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper0</span> <span class="keyword">extends</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">DC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] pns;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map pts;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] mns;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] dmns;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts0;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts2;</span><br><span class="line">    <span class="keyword">public</span> String[] getPropertyNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> pns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasProperty</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pts.containsKey(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getPropertyType</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Class)pts.get(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String[] getMethodNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> mns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String[] getDeclaredMethodNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> dmns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(Object var1, String var2, Object var3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AlarmLogService var4 = (AlarmLogService)var1;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(var6);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(<span class="string">"Not found property \""</span> + var2 + <span class="string">"\" filed or setter method in class com.facishare.pay.notice.service.AlarmLogService."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPropertyValue</span><span class="params">(Object var1, String var2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AlarmLogService var3 = (AlarmLogService)var1;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(var5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchPropertyException(<span class="string">"Not found property \""</span> + var2 + <span class="string">"\" filed or setter method in class com.facishare.pay.notice.service.AlarmLogService."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeMethod</span><span class="params">(Object var1, String var2, Class[] var3, Object[] var4)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        AlarmLogService var5;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var5 = (AlarmLogService)var1;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(var8);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"notifyError"</span>.equals(var2) &amp;&amp; var3.length == <span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> var5.notifyError((String)var4[<span class="number">0</span>], (LevelType)var4[<span class="number">1</span>], (TransTypeEnum)var4[<span class="number">2</span>], (String)var4[<span class="number">3</span>], (String)var4[<span class="number">4</span>], (Calendar)var4[<span class="number">5</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"queryAlarmLog"</span>.equals(var2) &amp;&amp; var3.length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> var5.queryAlarmLog((Pager)var4[<span class="number">0</span>], (AlarmLogVO)var4[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"updateAlarmLogStatus"</span>.equals(var2) &amp;&amp; var3.length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> var5.updateAlarmLogStatus((Long)var4[<span class="number">0</span>], (AlarmStatus)var4[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Not found method \""</span> + var2 + <span class="string">"\" in class com.facishare.pay.notice.service.AlarmLogService."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapper0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>服务发布-RegistryProtocol输出Invoker，RegistryProtocol调用由javasist生成的ProtocolAdaptiveProtocol.export(Invoker invoker)方法，该方法根据invoker中的URL的protocol协议值获取对应的实现类(默认是dubbo，对应实现类是DubboProtocol，我们可通过<dubbo.protocol>的name属性配置其他实现类)输出Invoker。</dubbo.protocol></li>
</ul>
<p>serviceKey组成规则：serviceGroup/serviceName: version:port</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        URL url = invoker.getUrl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// export service.</span></span><br><span class="line">        String key = serviceKey(url);</span><br><span class="line">        DubboExporter&lt;T&gt; exporter = <span class="keyword">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap);</span><br><span class="line">        exporterMap.put(key, exporter);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//export an stub service for dispaching event</span></span><br><span class="line">        Boolean isStubSupportEvent = url.getParameter(Constants.STUB_EVENT_KEY,Constants.DEFAULT_STUB_EVENT);</span><br><span class="line">        Boolean isCallbackservice = url.getParameter(Constants.IS_CALLBACK_SERVICE, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice)&#123;</span><br><span class="line">            String stubServiceMethods = url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class="line">            <span class="keyword">if</span> (stubServiceMethods == <span class="keyword">null</span> || stubServiceMethods.length() == <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled())&#123;</span><br><span class="line">                    logger.warn(<span class="keyword">new</span> IllegalStateException(<span class="string">"consumer ["</span> +url.getParameter(Constants.INTERFACE_KEY) +</span><br><span class="line">                            <span class="string">"], has set stubproxy support event ,but no stub methods founded."</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        openServer(url);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> exporter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>新建并根据服务地址与端口缓存服务端，已即对应我们的SocketServer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openServer</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// find server.</span></span><br><span class="line">        String key = url.getAddress();</span><br><span class="line">        <span class="comment">//client 也可以暴露一个只有server可以调用的服务。</span></span><br><span class="line">        <span class="keyword">boolean</span> isServer = url.getParameter(Constants.IS_SERVER_KEY,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">        	ExchangeServer server = serverMap.get(key);</span><br><span class="line">        	<span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">        		serverMap.put(key, createServer(url));</span><br><span class="line">        	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        		<span class="comment">//server支持reset,配合override功能使用</span></span><br><span class="line">        		server.reset(url);</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>创建服务端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ExchangeServer <span class="title">createServer</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认开启server关闭时发送readonly事件</span></span><br><span class="line">        url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">        <span class="comment">//默认开启heartbeat</span></span><br><span class="line">        url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line">        String str = url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Unsupported server type: "</span> + str + <span class="string">", url: "</span> + url);</span><br><span class="line"></span><br><span class="line">        url = url.addParameter(Constants.CODEC_KEY, Version.isCompatibleVersion() ? COMPATIBLE_CODEC_NAME : DubboCodec.NAME);</span><br><span class="line">        ExchangeServer server;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = Exchangers.bind(url, requestHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Fail to start server(url: "</span> + url + <span class="string">") "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        str = url.getParameter(Constants.CLIENT_KEY);</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();</span><br><span class="line">            <span class="keyword">if</span> (!supportedTypes.contains(str)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Unsupported client type: "</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>创建HeaderExchangeServer，并创建Timer定时发送心跳消息给已连接的通道也即客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchanger</span> <span class="keyword">implements</span> <span class="title">Exchanger</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"header"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeServer <span class="title">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderExchangeServer(Transporters.bind(url, <span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认通过NettyTransporter创建NettyServer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transporters</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handlers == <span class="keyword">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"handlers == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ChannelHandler handler;</span><br><span class="line">        <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">            handler = handlers[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getTransporter().bind(url, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 通过扩展模块获取Transport适配器，并根据方法传入的URL的transporter参数获取对应的Transporter实现类，具体过程参考Dubbo扩展模块</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transporter <span class="title">getTransporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建NettyServer，创建监听，绑定端口<br><img src="/images/dubbo/netty_server.png" alt="netty_server"></p>
<ul>
<li>服务发布-RegistryProtocol注册服务，同样是调用RegistryFactory的Adaptive类的getRegistry方法，该方法获取URL的registry参数值，并通过该值获取对应的实现类，调用实现类的register方法。例子中给的是zookeeper，对应的注册器实现类是ZookeeperRegistry，ZookeeperRegistry继承与FailbackRegistry，以下是该方法的执行过程</li>
</ul>
<p>调用zookeeper客户端创建服务Node，文件路径组成形式： /group/seviceInterfacePath/providers/urlFullPath<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">       	zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class="keyword">true</span>));</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to register "</span> + url + <span class="string">" to zookeeper "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>服务发布-ProtocolFilterWrapper<br>Dubbo ExtentionLoader，提供了Extension Wrapper功能，通俗来说Dubbo先创建Extension类，创建其Wrapper类并注入被包装的类（如果其有Wrapper类，如有多个Wrapper类，会依次创建，返回的是最后创建的Wrapper类）；ProtocolFilterWrapper就是Protocol的一个Wrapper类，该类是给服务调用添加Filter功能，AccessLogFilter(服务请求信息打印)、ActiveLimitFilter(服务当前活动数限制Filter)等等，具体参考模块分析。</p>
</li>
<li><p>服务发布-ProtocolListenerWrapper<br>ProtocolListenerWrapper是Protocol的Wrapper类，给服务的注册于卸载添加监听。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExporterListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The exporter exported.</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Protocol#export(Invoker)</span><br><span class="line">     * <span class="doctag">@param</span> exporter</span><br><span class="line">     * <span class="doctag">@throws</span> RpcException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exported</span><span class="params">(Exporter&lt;?&gt; exporter)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The exporter unexported.</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@see</span> com.alibaba.dubbo.rpc.Exporter#unexport()</span><br><span class="line">     * <span class="doctag">@param</span> exporter</span><br><span class="line">     * <span class="doctag">@throws</span> RpcException</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unexported</span><span class="params">(Exporter&lt;?&gt; exporter)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Dubbo消费者启动过程"><a href="#Dubbo消费者启动过程" class="headerlink" title="Dubbo消费者启动过程"></a>Dubbo消费者启动过程</h2><ul>
<li>配置客户端Registry信息</li>
<li>配置Consumer信息</li>
<li>配置Application信息</li>
<li>配置Module信息</li>
<li>配置Monitor信息</li>
<li>Dubbo消费者Bean对应于ReferenceBean，该类实现了Spring的FactoryBean，在获取该对象的应用时会调用的getObject方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (destroyed)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already destroyed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">if</span> (ref == <span class="keyword">null</span>) &#123;</span><br><span class="line">    		init();</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>调用初始方法创建客户端代理，引用远程服务。URL格式如：<br><strong>registry</strong>://172.31.105.107:4180/com.alibaba.dubbo.registry.RegistryService?application=fs-open-pay_business&amp;check=false&amp;compiler=javassist&amp;dubbo=2.5.3&amp;logger=slf4j&amp;organization=FSOPEN&amp;owner=fs-open-pay_business&amp;pid=14936&amp;refer=application%3Dfs-open-pay_business%26check%3Dfalse%26compiler%3Djavassist%26default.check%3Dfalse%26default.init%3Dfalse%26default.retries%3D0%26default.timeout%3D3000%26dubbo%3D2.5.3%26init%3Dtrue%26interface%3D<br><strong>com.facishare.pay.order.service.OrderService</strong>%26logger%3Dslf4j%26methods%3DqueryOrder%2CgetOrderByOrderNo%2CaddOrder%2CupdateOrder%2CupdateOrderStatus%26organization%3DFSOPEN%26owner%3Dfs-open-pay_business%26pid%3D14936%26revision%3D0.0.2-SNAPSHOT%26side%3Dconsumer%26timeout%3D3000%26timestamp%3D1461650714943%26version%3D1.0&amp;registry=zookeeper&amp;timestamp=1461650715005</p>
<p>com.alibaba.dubbo.registry.integration.RegistryProtocol<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">        Registry registry = registryFactory.getRegistry(url);</span><br><span class="line">        <span class="keyword">if</span> (RegistryService.class.equals(type)) &#123;</span><br><span class="line">        	<span class="keyword">return</span> proxyFactory.getInvoker((T) registry, type, url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// group="a,b" or group="*"</span></span><br><span class="line">        Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));</span><br><span class="line">        String group = qs.get(Constants.GROUP_KEY);</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="keyword">null</span> &amp;&amp; group.length() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ( Constants.COMMA_SPLIT_PATTERN.split( group ) ).length &gt; <span class="number">1</span></span><br><span class="line">                    || <span class="string">"*"</span>.equals( group ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> doRefer( getMergeableCluster(), registry, type, url );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doRefer(cluster, registry, type, url);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>注册consumer到zookeeper，创建的目录格式如下：<br><strong>/dubbo/com.facishare.pay.order.service.OrderService/consumers/consumer</strong>%3A%2F%2F10.22.0.78%2Fcom.facishare.pay.order.service.OrderService%3Fapplication%3Dfs-open-pay_business%26category%3Dconsumers%26check%3Dfalse%26compiler%3Djavassist%26default.check%3Dfalse%26default.init%3Dfalse%26default.retries%3D0%26default.timeout%3D3000%26dubbo%3D2.5.3%26init%3Dtrue%26interface%3Dcom.facishare.pay.order.service.OrderService%26logger%3Dslf4j%26methods%3DqueryOrder%2CgetOrderByOrderNo%2CaddOrder%2CupdateOrder%2CupdateOrderStatus%26organization%3DFSOPEN%26owner%3Dfs-open-pay_business%26pid%3D14936%26revision%3D0.0.2-SNAPSHOT%26side%3Dconsumer%26timeout%3D3000%26timestamp%3D1461650714943%26version%3D1.0</p>
<p>并订阅符合条件的已注册数据，当有注册数据变更时自动推送<br>URL中添加参数，category=providers,configurators,routers<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doRefer</span><span class="params">(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        RegistryDirectory&lt;T&gt; directory = <span class="keyword">new</span> RegistryDirectory&lt;T&gt;(type, url);</span><br><span class="line">        directory.setRegistry(registry);</span><br><span class="line">        directory.setProtocol(protocol);</span><br><span class="line">        URL subscribeUrl = <span class="keyword">new</span> URL(Constants.CONSUMER_PROTOCOL, NetUtils.getLocalHost(), <span class="number">0</span>, type.getName(), directory.getUrl().getParameters());</span><br><span class="line">        <span class="keyword">if</span> (! Constants.ANY_VALUE.equals(url.getServiceInterface())</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.REGISTER_KEY, <span class="keyword">true</span>)) &#123;</span><br><span class="line">			<span class="comment">// 注册consumer</span></span><br><span class="line">            registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY,</span><br><span class="line">                    Constants.CHECK_KEY, String.valueOf(<span class="keyword">false</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 订阅已注册数据</span></span><br><span class="line">        directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY, </span><br><span class="line">                Constants.PROVIDERS_CATEGORY </span><br><span class="line">                + <span class="string">","</span> + Constants.CONFIGURATORS_CATEGORY </span><br><span class="line">                + <span class="string">","</span> + Constants.ROUTERS_CATEGORY));</span><br><span class="line">        <span class="keyword">return</span> cluster.join(directory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>对如下目录添加Child变化监听：<br>/dubbo/com.facishare.pay.order.service.OrderService/<strong>providers</strong><br>/dubbo/com.facishare.pay.order.service.OrderService/<strong>configurators</strong><br>/dubbo/com.facishare.pay.order.service.OrderService/<strong>routers</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSubscribe</span><span class="params">(<span class="keyword">final</span> URL url, <span class="keyword">final</span> NotifyListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;URL&gt; urls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">                <span class="keyword">for</span> (String path : toCategoriesPath(url)) &#123;</span><br><span class="line">                    ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);</span><br><span class="line">                    <span class="keyword">if</span> (listeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        zkListeners.putIfAbsent(url, <span class="keyword">new</span> ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());</span><br><span class="line">                        listeners = zkListeners.get(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ChildListener zkListener = listeners.get(listener);</span><br><span class="line">                    <span class="keyword">if</span> (zkListener == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        listeners.putIfAbsent(listener, <span class="keyword">new</span> ChildListener() &#123;</span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childChanged</span><span class="params">(String parentPath, List&lt;String&gt; currentChilds)</span> </span>&#123;</span><br><span class="line">                            	ZookeeperRegistry.<span class="keyword">this</span>.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        zkListener = listeners.get(listener);</span><br><span class="line">                    &#125;</span><br><span class="line">                    zkClient.create(path, <span class="keyword">false</span>);</span><br><span class="line">                    List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);</span><br><span class="line">                    <span class="keyword">if</span> (children != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    	urls.addAll(toUrlsWithEmpty(url, path, children));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                notify(url, listener, urls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to subscribe "</span> + url + <span class="string">" to zookeeper "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>com.alibaba.dubbo.registry.integration.RegistryDirectory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123;</span><br><span class="line">        List&lt;URL&gt; invokerUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">        List&lt;URL&gt; routerUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">        List&lt;URL&gt; configuratorUrls = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">            String protocol = url.getProtocol();</span><br><span class="line">            String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">            <span class="keyword">if</span> (Constants.ROUTERS_CATEGORY.equals(category) </span><br><span class="line">                    || Constants.ROUTE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">                routerUrls.add(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.CONFIGURATORS_CATEGORY.equals(category) </span><br><span class="line">                    || Constants.OVERRIDE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">                configuratorUrls.add(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.PROVIDERS_CATEGORY.equals(category)) &#123;</span><br><span class="line">                invokerUrls.add(url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.warn(<span class="string">"Unsupported category "</span> + category + <span class="string">" in notified url: "</span> + url + <span class="string">" from registry "</span> + getUrl().getAddress() + <span class="string">" to consumer "</span> + NetUtils.getLocalHost());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// configurators </span></span><br><span class="line">        <span class="keyword">if</span> (configuratorUrls != <span class="keyword">null</span> &amp;&amp; configuratorUrls.size() &gt;<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>.configurators = toConfigurators(configuratorUrls);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// routers</span></span><br><span class="line">        <span class="keyword">if</span> (routerUrls != <span class="keyword">null</span> &amp;&amp; routerUrls.size() &gt;<span class="number">0</span> )&#123;</span><br><span class="line">            List&lt;Router&gt; routers = toRouters(routerUrls);</span><br><span class="line">            <span class="keyword">if</span>(routers != <span class="keyword">null</span>)&#123; <span class="comment">// null - do nothing</span></span><br><span class="line">                setRouters(routers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Configurator&gt; localConfigurators = <span class="keyword">this</span>.configurators; <span class="comment">// local reference</span></span><br><span class="line">        <span class="comment">// 合并override参数</span></span><br><span class="line">        <span class="keyword">this</span>.overrideDirectoryUrl = directoryUrl;</span><br><span class="line">        <span class="keyword">if</span> (localConfigurators != <span class="keyword">null</span> &amp;&amp; localConfigurators.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Configurator configurator : localConfigurators) &#123;</span><br><span class="line">                <span class="keyword">this</span>.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// providers</span></span><br><span class="line">        refreshInvoker(invokerUrls);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Dubbo主要模块分析"><a href="#Dubbo主要模块分析" class="headerlink" title="Dubbo主要模块分析"></a>Dubbo主要模块分析</h1><h2 id="Dubbo扩展模块"><a href="#Dubbo扩展模块" class="headerlink" title="Dubbo扩展模块"></a>Dubbo扩展模块</h2><h2 id="Dubbo很多模块提供了多种实现，在Dubbo配置文件配置对应的属性选择不同的实现类，在发布服务时Dubbo会根据配置的值在URL中添加相应的参数，然后各个模块的Adaptive会根据URL中的参数值选择相应的实现类（如果模块实现类没有Adaptive注解，Dubbo会动态的创建该模块的Adaptive实现类）。"><a href="#Dubbo很多模块提供了多种实现，在Dubbo配置文件配置对应的属性选择不同的实现类，在发布服务时Dubbo会根据配置的值在URL中添加相应的参数，然后各个模块的Adaptive会根据URL中的参数值选择相应的实现类（如果模块实现类没有Adaptive注解，Dubbo会动态的创建该模块的Adaptive实现类）。" class="headerlink" title="Dubbo很多模块提供了多种实现，在Dubbo配置文件配置对应的属性选择不同的实现类，在发布服务时Dubbo会根据配置的值在URL中添加相应的参数，然后各个模块的Adaptive会根据URL中的参数值选择相应的实现类（如果模块实现类没有Adaptive注解，Dubbo会动态的创建该模块的Adaptive实现类）。"></a>Dubbo很多模块提供了多种实现，在Dubbo配置文件配置对应的属性选择不同的实现类，在发布服务时Dubbo会根据配置的值在URL中添加相应的参数，然后各个模块的Adaptive会根据URL中的参数值选择相应的实现类（如果模块实现类没有Adaptive注解，Dubbo会动态的创建该模块的Adaptive实现类）。</h2><h3 id="主要类图"><a href="#主要类图" class="headerlink" title="主要类图"></a>主要类图</h3><p><img src="/images/java/dubbo/extension_module_frame.png" alt="extension_module_frame"></p>
<ul>
<li>Active注解，类注解，对于可以被框架中自动激活加载扩展，此Annotation用于配置扩展被自动激活加载条件。</li>
</ul>
<h3 id="主要类分析"><a href="#主要类分析" class="headerlink" title="主要类分析"></a>主要类分析</h3><h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><h2 id="Dubbo服务端"><a href="#Dubbo服务端" class="headerlink" title="Dubbo服务端"></a>Dubbo服务端</h2><h2 id="Dubbo客户端"><a href="#Dubbo客户端" class="headerlink" title="Dubbo客户端"></a>Dubbo客户端</h2><h2 id="Dubbo-Filter"><a href="#Dubbo-Filter" class="headerlink" title="Dubbo Filter"></a>Dubbo Filter</h2><h2 id="Dubbo-Transport"><a href="#Dubbo-Transport" class="headerlink" title="Dubbo Transport"></a>Dubbo Transport</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mybatis and spring integrate analyze]]></title>
      <url>https://qiufanghua.github.io/2016/04/27/mybatis-and-spring-integrate-analyze/</url>
      <content type="html"><![CDATA[<h1 id="Mybatis与Spring集成"><a href="#Mybatis与Spring集成" class="headerlink" title="Mybatis与Spring集成"></a>Mybatis与Spring集成</h1><ul>
<li>Spring配置文件中配置SqlSessionFactoryBean，启动Mybatis。包括Mybatis参数配置以及Mybatis statement解析。<br><img src="/images/java/mybatis/sqlsessionfactorybean.png" alt="sqlsessionfactorybean"></li>
<li>配置MapperScannerConfigurer，配置的MapperScanConfigurer在Spring启动时调用ClassPathMapperScanner扫描basePackage包下的接口Mapper，生成BeanDefinition，设置mapperInterface为我们的Mapper接口，设置BeanClass为MapperFactoryBean。<br><img src="/images/java/mybatis/mapper_scan_configurer.png" alt="mapper_scan_configurer"></li>
<li>Spring自动注入接口Mapper时会调用上一步创建MapperFactoryBean的getObject方法，MapperFactoryBean创建MapperProxy，由改对象代理我们接口方法。</li>
</ul>
<h2 id="Spring注入接口Mapper对象过程"><a href="#Spring注入接口Mapper对象过程" class="headerlink" title="Spring注入接口Mapper对象过程"></a>Spring注入接口Mapper对象过程</h2><p><img src="/images/java/mybatis/mapper_sequence.png" alt="mapper_sequence"></p>
<ul>
<li>MapperScannerConfigurer，Spring容器调用该类postProcessBeanDefinitionRegistry方法，创建ClassPathMapperScanner实例，根据配置设置该实例，调用ClassPathMapperScanner scan方法</li>
<li>ClassPathMapperScanner扫描basePackage包下的接口，生成BeanDefinition，设置BeanClass为MapperFactoryBean，并自动注入SqlSessionFactory实例，在注入SqlSessionFactory实例时创建SqlSessionTemplate实例。</li>
<li>Spring注入接口Mapper时，则调用上一步创建MapperFactoryBean的getObject方法。</li>
<li>调用SqlSessionTemplate的getMapper方法。</li>
<li>调用Mybatis的MapperRegistry的getMapper方法。</li>
<li>创建MapperProxy代理类实例，返回该实例</li>
</ul>
<h1 id="接口Mapper查询方法执行过程"><a href="#接口Mapper查询方法执行过程" class="headerlink" title="接口Mapper查询方法执行过程"></a>接口Mapper查询方法执行过程</h1><p>我们以selectByExample为例<br><img src="/images/java/mybatis/mapper_selectByExample.png" alt="mapper_selectByExample"></p>
<ul>
<li>调用我们Mapper接口select方法（方法名对应我们的SQL Mapper配置文件的id）</li>
<li>MapperProxy对象代理我们的方法，创建MapperMethod</li>
<li>MapperMethod中生成SqlCommand保存SQL命令类型与MappedStatement类型，MethodSignature保存方法签名信息。</li>
<li>调用SqlSessionTemplate执行selectList方法，改方法会先根据是否配置有事务获取或创建Mybatis SQLSession</li>
</ul>
<p>DefaultSqlSession selectList<br><img src="/images/java/mybatis/defaultSqlSession_selectList.png" alt="defaultSqlSession_selectList"></p>
<ul>
<li>根据不同的执行类型创建执行器，eg：Batch、Simple以及Reuse执行器</li>
<li>创建RoutingStatementHander语句处理器</li>
<li>创建DefaultParameterHandler设置执行的sql参数</li>
<li>创建DefaultResultSetHandler处理JDBC查询的结果集</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Netty Resource Leak Detector]]></title>
      <url>https://qiufanghua.github.io/2016/04/27/Netty-Resource-Leak-Detector/</url>
      <content type="html"><![CDATA[<h1 id="Netty-Resources泄漏检测"><a href="#Netty-Resources泄漏检测" class="headerlink" title="Netty Resources泄漏检测"></a>Netty Resources泄漏检测</h1><p>早前有看到文章介绍Java PhantomReferences(虚引用)可以用来检测资源是否泄漏，但是一直没有找到实际的例子，最近看到Netty源码时发现有用到他检测资源是否泄漏，刚好最近也在强迫自己写博客，希望这只是个开始。下面我按三个方面来进行阐述。</p>
<h2 id="总体描叙"><a href="#总体描叙" class="headerlink" title="总体描叙"></a>总体描叙</h2><p><img src="/images/java/netty/resource_leak_class_diagram.png" alt="resources leak detector"></p>
<p>Netty DefaultResourceLeak通过继承Java PhantomReference提供额外接口record()记录访问资源的堆栈信息以及提供close()设置引用的资源是否释放，在资源没有强引用时该对象，由垃圾收集器决定何时添加该资源引用到引用队列，通过遍历引用队列，判断引用的资源是否已经释放。</p>
<h3 id="ResourceLeak"><a href="#ResourceLeak" class="headerlink" title="ResourceLeak"></a>ResourceLeak</h3><p>提供方法record()记录当前方法堆栈信息，我们在访问资源前调用此方法记录当前方法调用堆栈信息，通过工厂方法获取资源时，获取到的是该资源的包装对象，在包装对象中有选择的调用ResourceLeak对象的record方法；在资源释放时调用close()方法，停止对该资源的监控。</p>
<h3 id="DefaultResourceLeak"><a href="#DefaultResourceLeak" class="headerlink" title="DefaultResourceLeak"></a>DefaultResourceLeak</h3><p>ResourceLeak的默认实现，同时也继承了Java PhantomReference。该对象对应于双向链表的节点，包含前、后节点的引用，检测资源是否释放标识freed以及最近记录的检测资源的方法调用堆栈信息。</p>
<h3 id="ResourceLeakDetector"><a href="#ResourceLeakDetector" class="headerlink" title="ResourceLeakDetector"></a>ResourceLeakDetector</h3><p>资源泄漏检测，维护了ResourceLeak的双向链表，通过该对象open(T obj)方法新增DefaultResourceLeak对象跟踪传入的资源，同时遍历引用队列ReferenceQueue<object> refQueue获取DefaultResourceLeak对象检测资源是否释放，如果没有释放打印资源泄漏日志并置ConcurrentMap<string, boolean=""> reportedLeaks标识</string,></object></p>
<h2 id="流程描叙"><a href="#流程描叙" class="headerlink" title="流程描叙"></a>流程描叙</h2><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><h2 id="易忽略点"><a href="#易忽略点" class="headerlink" title="易忽略点"></a>易忽略点</h2><ol>
<li>当对象没有强引用时，该对象的引用对象Reference会添加到引用队列，引用对象Reference的具体类型是由创建该对象的引用时决定的eg : new DefaultResourceLeak(obj);遍历引用队列时则返回的类型是DefaultResourceLeak对象</li>
<li>DefaultResourceLeak(Object referent)构造方法有判断referent是否为空，为空则不会被添加到引用队列：super(referent, referent != null? refQueue : null);</li>
<li>何时来报道资源是否有泄漏。调用ResourceLeakDetector open(T obj)方法时，遍历引用队列。</li>
<li>何时从引用队列中删除引用。资源释放时会调用DefaultResourceLeak close()方法，会从链表中删除该节点。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (freed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (head) &#123;</span><br><span class="line">            active --;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            prev = <span class="keyword">null</span>;</span><br><span class="line">            next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://qiufanghua.github.io/2016/04/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
